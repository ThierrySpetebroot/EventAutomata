// Generated by CoffeeScript 1.7.1
var Automata;

Automata = (function() {
  var _evtHandler, _getInitState, _gotoState;

  _gotoState = function(target, evt, _evtMapper) {
    var source;
    source = this.currentStatus;
    if (this.currentStatus && (this.currentStatus.exit != null)) {
      this.currentStatus.exit();
    }
    this.currentStatus = target;
    _evtMapper.trigger('transition', this, {
      from: source,
      to: target,
      trigger: evt
    });
    if (this.currentStatus.enter != null) {
      this.currentStatus.enter();
    }
    if (this.currentStatus.run != null) {
      this.currentStatus.run();
    }
    if (this.currentStatus.final === true) {
      this.stop(this.currentStatus);
    }
  };

  _evtHandler = function(evt, _evtMapper) {
    var transition, transitions, _i, _len;
    if (!this.active) {
      return;
    }
    transitions = this.model.links[this.currentStatus.id];
    for (_i = 0, _len = transitions.length; _i < _len; _i++) {
      transition = transitions[_i];
      if (transition.trigger === evt) {
        _gotoState.call(this, transition.target, evt, _evtMapper);
        break;
      }
    }
  };

  _getInitState = function(model) {
    var s, _i, _len, _ref;
    _ref = model.nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (s.init === true) {
        return s;
      }
    }
    return void 0;
  };

  function Automata(model, ed, env) {
    var _evtMapper, _initialState;
    if (env == null) {
      env = {};
    }
    this.model = model;
    this.ed = ed;
    this.env = env;
    this.currentStatus = null;
    _initialState = _getInitState(model);
    if (_initialState == null) {
      _initialState = env.currentStatus;
    }
    _evtMapper = new EventMapper();
    this.on = _evtMapper.on;
    if (this.currentStatus == null) {
      _initialState = this.model.nodes[0];
      console.log("Initial Status not defined");
      console.log("inferred initial state " + _initialState.id + " - " + _initialState.name);
      this.active = false;
    }
    this.start = (function(_this) {
      return function() {
        _this.active = true;
        _gotoState.call(_this, _initialState, 'START', _evtMapper);
        _evtMapper.trigger('START', _this, {});
      };
    })(this);
    this.stop = (function(_this) {
      return function(state) {
        _this.active = false;
        _evtMapper('STOP', _this, state);
      };
    })(this);
    ed.on((function(_this) {
      return function(evt) {
        _evtHandler.call(_this, evt, _evtMapper);
      };
    })(this));
    return this;
  }

  return Automata;

})();
