// Generated by CoffeeScript 1.7.1
var Automata, EventDispatcher, EventMapper, Module;

Module = require('./../dist/all');

EventMapper = Module.EventMapper;

EventDispatcher = Module.EventDispatcher;

Automata = Module.Automata;

describe("Automata", function() {
  var automata, ed, env, log, model;
  log = console.log;
  automata = null;
  model = null;
  env = null;
  ed = null;
  beforeEach(function() {
    ed = new EventDispatcher();
    automata = new Automata(model, ed, env);
    return log('\n');
  });
  model = {};
  model.nodes = [
    {
      name: "S0",
      id: 0
    }, {
      name: "S1",
      id: 1,
      run: function() {
        return console.log("STATE 1!");
      }
    }
  ];
  model.links = {
    '0': [
      {
        trigger: "changeStatus",
        target: model.nodes[1]
      }
    ]
  };
  env = {};
  env.currentStatus = model.nodes[0];
  it("should change state on 'changeStatus' trigger if the automata is active", function() {
    expect(automata.currentStatus).toEqual(model.nodes[0]);
    automata.active = true;
    ed.trigger('null');
    expect(automata.currentStatus).toEqual(model.nodes[0]);
    ed.trigger('changeStatus');
    expect(automata.currentStatus).toEqual(model.nodes[1]);
    log("\nStatus changed: " + model.nodes[0].name + " -> " + model.nodes[1].name);
  });
  it("shouldn't change state on 'changeStatus' trigger if the automata is not active", function() {
    expect(automata.currentStatus).toEqual(model.nodes[0]);
    automata.active = false;
    ed.trigger('null');
    expect(automata.currentStatus).toEqual(model.nodes[0]);
    ed.trigger('changeStatus');
    expect(automata.currentStatus).toEqual(model.nodes[0]);
  });
});
